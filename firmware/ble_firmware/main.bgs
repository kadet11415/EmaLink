#version log
#v0.1 - battery measurement and BLE read working
#v0.3 
	# repurpose P0_1 as output for baterry indicator RED LED
	# introduce 5 sec timout to stop timer from calling do_spi() and wake-up CC
	# buzzer activate when low battery
	# introduce wake-up int for CC
#v3.0
	# remove "introduce 5 sec timout to stop timer from calling do_spi() and wake-up CC"
	# remove "introduce wake-up int for CC"
	# remove buzzer related code
	# version updated to "3.0"
#v3.1
	# call do_spi every 10 seconds after a 10 seconds timeout from the start of a command
	# improve red led warning when low battery to no impact SPI (delay no longer needed for buzzer)
	# version updated to "3.1"
#v3.1.1
	# Renamed to EmaLink
#v3.2.1
	# light red and green leds for 2 seconds at start-up
	# increase green blink frequency to 1Hz 
	# version updated to "3.2.1"
#v3.2.2
	# increase command timeout to 15 sec to take care of medtronic that had 12s timout in pump scan
#v3.3
	# replaced timeout with waiting for comand response; may drain the battery faster when a response does not come, should add some timeout?
#v3.4
	#split SPI command in separate commands to give time for CC to enter faster speed; allows use of 1.5Mhz idle speed for CC 
#v3.5
	#use lookup table for battery capacity calculation
#v3.6
	#debug only version for Medtronic connection issues
#v3.7
	#green led flashing once per 3 seconds
	#red led flashing once per 3 seconds at red_blink1 battery charge status 
	#red led flashing twice per 3 seconds at red_blink2 battery charge status
	#new lookup table for 620mAh battery
	#new lookup table for 500mAh battery
	#new lookup table for 300mAh battery
	#fix battery reporting to voltages below 3.0v

#todo

#CHOSE ONLY ONLY OF THE LOOK-UP TABLES BELOW


#look-up table for 1050mAh 103035 Cellevia battery
#const bat_voltage_LSB()="\xB1\x2B\xF3\x09\x1F\xE7\xFD\x13\x29\x8C\xA2\x06\xB8\x1C\xCE\x80\x32\xE4\x48\xFA\xAC\x5E\x10\x74\xD8\xEE\x94\xF3"
#const bat_voltage_MSB()="\x7F\x7E\x7C\x7C\x7B\x79\x78\x78\x77\x76\x75\x75\x74\x74\x73\x73\x73\x72\x72\x71\x71\x71\x71\x70\x6F\x6E\x6B\x3C"
#const bat_charge()=		"\x64\x60\x5C\x58\x54\x50\x4C\x48\x44\x40\x3D\x39\x36\x32\x2F\x2B\x28\x24\x21\x1D\x1A\x16\x13\x10\x09\x06\x03\x00"
#const red_blink1 = 		6
#const red_blink2 = 		3

#look-up table for 620mAh Cellevia battery
#const bat_voltage_LSB()="\xB1\x15\x2B\xDD\x41\xA5\x57\xBB\x6D\xD1\x83\xE7\x99\xFD\xAF\x61\x13\x77\x29\xDB\x3E\xF0\xA2\x54\x06\x6A\x1C\xCE\x80\x32\xE4\x48\xFA\xAC\x5E\xC2\x74\x26\xD8\x8A\x3C\xEE\xA0\x52\x04\xB6\x68\x1A\xCC\x7E\x30\x94\x46\xF8\x5C\x0E\xC0\x72\x24\xD6\x88\x3A\x9E\x18\xBD\xB1\xF3"
#const bat_voltage_MSB()="\x7F\x7F\x7E\x7D\x7D\x7C\x7C\x7B\x7B\x7A\x7A\x79\x79\x78\x78\x78\x78\x77\x77\x76\x76\x75\x75\x75\x75\x74\x74\x73\x73\x73\x72\x72\x71\x71\x71\x70\x70\x70\x6F\x6F\x6F\x6E\x6E\x6E\x6E\x6D\x6D\x6D\x6C\x6C\x6C\x6B\x6B\x6A\x6A\x6A\x69\x69\x69\x68\x68\x68\x67\x66\x62\x5F\x3C"
#const bat_charge()=		"\x64\x63\x61\x60\x5E\x5D\x5B\x5A\x59\x57\x56\x55\x53\x52\x51\x4F\x4E\x4D\x4B\x4A\x49\x48\x46\x45\x44\x43\x41\x40\x3F\x3E\x3D\x3B\x3A\x39\x38\x37\x36\x33\x32\x30\x2C\x28\x27\x24\x1F\x1D\x1B\x1A\x18\x16\x14\x12\x10\x0E\x0D\x0B\x0A\x09\x08\x07\x06\x05\x04\x03\x02\x01\x00\0x00"
#const red_blink1 = 	6
#const red_blink2 = 	3

#look-up table for 550mAh Hexunbaba 902030 battery
#const bat_voltage_LSB()="\x63\x79\xDD\xF3\x57\xBB\x1F\x83\xE7\x99\xFD\x61\xC5\x77\xDB\x8C\xF0\xA2\x54\xB8\x6A\xCE\x80\x32\xE4\x96\x48\xFA\xAC\x10\xC2\x74\x26\x8A\x3C\xEE\x52\x04\xB6\x1A\xCC\x7E\x30\x94\x46\xAA\x0E\x72\x24\x3A\x02\xE0\xD3\xF3\xF3"
#const bat_voltage_MSB()="\x7F\x7E\x7D\x7C\x7C\x7B\x7B\x7A\x79\x79\x78\x78\x77\x77\x76\x76\x75\x75\x75\x74\x74\x73\x73\x73\x72\x72\x72\x71\x71\x71\x70\x70\x70\x6F\x6F\x6E\x6E\x6E\x6D\x6D\x6C\x6C\x6C\x6B\x6B\x6A\x6A\x69\x69\x68\x67\x64\x61\x5C\x3C"
#const bat_charge()=		"\x64\x62\x60\x5E\x5C\x5A\x58\x56\x54\x52\x50\x4F\x4D\x4B\x49\x47\x46\x44\x42\x40\x3F\x3D\x3B\x36\x33\x31\x30\x2E\x2C\x2B\x29\x27\x26\x24\x21\x20\x1E\x1B\x19\x18\x16\x15\x13\x10\x0F\x0E\x0B\x09\x08\x06\x05\x04\x02\x01\x00"
#const red_blink1 = 		8
#const red_blink2 = 		4

#look-up table for 300mAh 752030 Cellevia battery
#const bat_voltage_LSB()="\x63\x79\xDD\xF3\x57\xBB\x1F\x83\xE7\x99\xFD\x61\xC5\x77\xDB\x8C\xF0\xA2\x54\xB8\x6A\xCE\x80\x32\xE4\x96\x48\xFA\xAC\x10\xC2\x74\x26\x8A\x3C\xEE\x52\x04\xB6\x1A\xCC\x7E\x30\x94\x46\xAA\x0E\x72\x24\x3A\x02\xE0\xD3\xF3\xF3"
#const bat_voltage_MSB()="\x7F\x7E\x7D\x7C\x7C\x7B\x7B\x7A\x79\x79\x78\x78\x77\x77\x76\x76\x75\x75\x75\x74\x74\x73\x73\x73\x72\x72\x72\x71\x71\x71\x70\x70\x70\x6F\x6F\x6E\x6E\x6E\x6D\x6D\x6C\x6C\x6C\x6B\x6B\x6A\x6A\x69\x69\x68\x67\x64\x61\x5C\x3C"
#const bat_charge()=		"\x64\x62\x60\x5E\x5C\x5A\x58\x56\x54\x52\x50\x4F\x4D\x4B\x49\x47\x46\x44\x42\x40\x3F\x3D\x3B\x36\x33\x31\x30\x2E\x2C\x2B\x29\x27\x26\x24\x21\x20\x1E\x1B\x19\x18\x16\x15\x13\x10\x0F\x0E\x0B\x09\x08\x06\x05\x04\x02\x01\x00\0x00"
#const red_blink1 = 		11
#const red_blink2 = 		6

#look-up table for 500mAh Ali 502030 battery
#const bat_voltage_LSB()="\x79\x8F\xA5\x09\x1F\x83\xE7\xFD\x61\x77\xDB\x3E\xA2\x06\x6A\xCE\x32\x96\x48\xFA\x5E\x74\x26\xD8\x8A\x3C\xEE\xA0\x52\x04\xB6\x68\xCC\x7E\x30\x94\x46\xF8\xAA\x0E\x72\x24\x88\xEC\x66\xA7\x15\xF3"
#const bat_voltage_MSB()="\x7E\x7D\x7C\x7C\x7B\x7A\x79\x78\x78\x77\x76\x76\x75\x75\x74\x73\x73\x72\x72\x71\x71\x70\x70\x6F\x6F\x6F\x6E\x6E\x6E\x6E\x6D\x6D\x6C\x6C\x6C\x6B\x6B\x6A\x6A\x6A\x69\x69\x68\x67\x66\x63\x5F\x3C"
#const bat_charge()=		"\x64\x62\x5F\x5D\x5B\x59\x57\x54\x52\x50\x4E\x4C\x4A\x48\x46\x44\x42\x40\x3F\x3D\x3B\x39\x37\x35\x34\x30\x2E\x2B\x27\x24\x20\x1D\x19\x18\x16\x14\x13\x11\x0F\x0E\x0C\x0B\x07\x06\x04\x03\x01\x00\0x00"
#const red_blink1 = 		12
#const red_blink2 = 		6

#look-up table for 500mAh Liter 503030 battery
const bat_voltage_LSB()="\xC7\xDD\xF3\x57\x6D\xD1\xE7\x4B\x61\x13\x29\x8C\xF0\xA2\xB8\x6A\xCE\x32\xE4\x48\xFA\x5E\xC2\x74\x26\x8A\x3C\xEE\xA0\x52\x04\xB6\x68\x1A\xCC\x7E\x30\xE2\x94\x46\xF8\x5C\x0E\x72\x24\xD6\x3A\x9E\xCA\x21\xF3"
const bat_voltage_MSB()="\x7E\x7D\x7C\x7C\x7B\x7A\x79\x79\x78\x78\x77\x76\x75\x75\x74\x74\x73\x73\x72\x72\x71\x71\x70\x70\x70\x6F\x6F\x6E\x6E\x6E\x6E\x6D\x6D\x6D\x6C\x6C\x6C\x6B\x6B\x6B\x6A\x6A\x6A\x69\x69\x68\x68\x67\x65\x62\x3C"
const bat_charge()=	"\x64\x62\x60\x5D\x5B\x59\x57\x55\x53\x51\x4F\x4D\x4B\x49\x47\x45\x43\x42\x40\x3E\x3C\x3A\x39\x37\x35\x32\x30\x2C\x2B\x27\x22\x21\x1F\x1C\x1A\x18\x17\x15\x14\x12\x10\x0F\x0D\x0C\x0A\x09\x07\x06\x04\x03\x00"
const red_blink1 = 		12
const red_blink2 = 		6

#look-up table for 400mAh 602626 battery
#const bat_voltage_LSB()="\xC7\xDD\x41\xA5\x09\x1F\x35\xFD\xAF\x13\xC5\x29\xDB\x3E\xF0\xA2\x06\xB8\x6A\x1C\x80\x32\xE4\x96\x48\xFA\xAC\x10\xC2\x74\x26\xA0\xE2\x9E\xF3"
#const bat_voltage_MSB()="\x7E\x7D\x7D\x7C\x7C\x7B\x7A\x78\x78\x78\x77\x77\x76\x76\x75\x75\x75\x74\x74\x74\x73\x73\x72\x72\x72\x71\x71\x71\x70\x70\x70\x6E\x6B\x67\x3C"
#const bat_charge()=	 "\x64\x61\x5E\x5B\x58\x55\x52\x50\x4D\x4A\x47\x45\x42\x3F\x3D\x3A\x38\x33\x30\x2D\x28\x26\x23\x21\x1F\x1C\x17\x15\x12\x0E\x09\x07\x04\x02\x00"
#const red_blink1 = 	14
#const red_blink2 = 	7

#look-up table for 250mAh 502030 Cellevia battery
#const bat_voltage_LSB()="\x63\xC7\x8F\x57\x1F\x35\x4B\x13\x29\x3E\x54\xB8\xCE\x32\xFA\x5E\xC2\x26\x8A\x3C\xA0\x52\x04\x68\x1A\x7E\x30\x94\xF8\x0E\xC0\x24\x50\xF5\xF3"
#const bat_voltage_MSB()="\x7F\x7E\x7D\x7C\x7B\x7A\x79\x78\x77\x76\x75\x74\x73\x73\x71\x71\x70\x70\x6F\x6F\x6E\x6E\x6E\x6D\x6D\x6C\x6C\x6B\x6A\x6A\x69\x69\x67\x63\x3C"
#const bat_charge()=		"\x64\x60\x5D\x59\x56\x53\x4F\x4C\x49\x46\x43\x40\x3D\x3A\x37\x34\x31\x2E\x2C\x29\x23\x21\x1E\x1B\x19\x16\x13\x11\x0E\x0C\x09\x07\x04\x00\x00"
#const red_blink1 = 		14
#const red_blink2 = 		9

#use this to adjust such that capacity reporting is in line with the battery voltage. Test at ~3.8v
const voltage_adj = 1006


dim bat_idx
dim tmp(2)
dim spi_in_buf(255)
dim spi_in_buf_len
dim spi_out_buf(255)
dim spi_out_buf_len
# 1 = waiting for ble client to read bytes from data attr.
# We halt spi comms until this happens. Crude flow control.
dim waiting_for_client
dim connected
dim slave_bytes_avail
dim spi_xfer_size
dim spi_batch_size
dim spi_batch_offset
dim name(32)
dim name_len
dim result
dim channel
dim continue
dim escaping
dim bytes_to_send
dim tlen
dim idx
dim response_count
dim expected_length
dim send_idx
dim chunk_size
dim in_spi
dim led_timer
dim timer_tick_count
dim timer_update_count
dim led_mode
dim num_iterations
dim comm_in_progress

#variable to save handle
dim batconn_handle

#store battery measurement result
dim batresult

event system_boot(major,minor,patch,build,ll_version,protocol,hw)
	batconn_handle=$ff
	name_len=0
	response_count=0
	in_spi=0
	led_mode=0
	batresult=100
  
	call flash_ps_load($8000)(result, name_len, name(0:name_len))
	if result != 0 then
		name_len = 7
		name(0:1) = $45 # E
		name(1:1) = $6d # m
		name(2:1) = $61 # a
		name(3:1) = $4c # L
		name(4:1) = $69 # i
		name(5:1) = $6e # n
		name(6:1) = $6b # k
	end if

	#call gap_set_adv_parameters(1600, 4000, 1)  #Min interval 1000ms, max interval 2500ms, use onlt 1 channel - does not help when connected
	
	call gap_set_mode(gap_general_discoverable,gap_undirected_connectable) #start advertising in connectible mode

	call hardware_io_port_config_direction(0, $13) #Make P0_0 (green led), P0_1 (red led), P0_4 (SPI_SS) as outputs
	
	call hardware_io_port_write(0, $10, 1) #disable SPI_S
	
	call hardware_io_port_write(0, $3, 0) #Turn P0_0 (green led), P0_1 (red led) off
	#wait 2s
	num_iterations = 4240
	while num_iterations > 0
		num_iterations = num_iterations - 1
	end while
	call hardware_io_port_write(0, $3, 3) #Turn P0_0 (green led), P0_1 (red led) off
	
	#call hardware_io_port_config_direction(1, $03) #Make P1_0 (buzz1), P1_1 (buzz2)
	
	memset(spi_out_buf(0), $11, 255) #Init output buffer

	call attributes_write(xgatt_name, 0, name_len, name(0:name_len))
	call attributes_write(xgatt_custom_name, 0, name_len, name(0:name_len))
	
	call hardware_set_soft_timer($666, 1, 0) #Start ~50ms timer
end

procedure do_spi()
  if in_spi = 1 then	#apelat de un event in timp ce procesa deja
    return
  end if

  in_spi = 1
  
  call hardware_io_port_write(0, $10, 0) #activeaza SPI_SS

  # Do not send length byte at beginning of spi_out_buf
  if spi_out_buf_len > 0 then
    spi_out_buf_len = spi_out_buf_len - 1
	comm_in_progress = 1	#se trime o comanda
  end if

  tmp(0:1) = $99
  tmp(1:1) = spi_out_buf_len
  #comunica cat de mult are de transmis si afla cat de mult are de receptionat
  call hardware_spi_transfer(0,1,tmp(0:1))(result,channel,tlen,tmp(0:1)) 
  call hardware_spi_transfer(0,1,tmp(1:2))(result,channel,tlen,tmp(1:2)) 
  slave_bytes_avail = tmp(1:1)
  #foloseste cea mai mare lungime dintre datele de trimis si cele de primit
  spi_xfer_size = slave_bytes_avail
  if spi_out_buf_len > spi_xfer_size then
    spi_xfer_size = spi_out_buf_len
  end if

  spi_batch_size = spi_xfer_size
  spi_batch_offset = 0
  if spi_batch_size > 10 then
    spi_batch_size = 10
  end if

  #transmite tot ce are de transmis sau mai mult in cazul in care are mai multe de receptionat, in pachete de 10 bytes
  while spi_batch_size > 0 
    call hardware_spi_transfer(0,spi_batch_size,spi_out_buf(spi_batch_offset+1:spi_batch_size))(result,channel,tlen,spi_in_buf(spi_batch_offset:spi_batch_size))
    spi_batch_offset = spi_batch_offset + spi_batch_size
    spi_batch_size = spi_xfer_size - spi_batch_offset
    if spi_batch_size > 10 then
      spi_batch_size = 10
    end if
  end while

  call hardware_io_port_write(0, $10, $10) #dezactiveaza SPI_SS

  if slave_bytes_avail > 0 then #am receptionat ceva
	if spi_out_buf_len = 0 then #s-a receptionat ceva o comanda si nu s-a trimis una noua
		comm_in_progress = 0	#deci nu mai e nici o comanda in progress
	end if
    waiting_for_client = 1 #nu mai citim nimic de la SPI pana cand nu trimitem prin BLE batch-ul curent, poate fi pana la maximum SPI_BUF_LEN = 64
    response_count = response_count + 1 #numarul de raspunsuri de la PAD
    call attributes_write(xgatt_response_count,0,1,response_count)
    #call set_data_led(1) //this output is now used for battery indicator LED
  end if

  memset(spi_out_buf(0), $11, spi_out_buf_len) #curatam buferul de iesire SPI, am transmis ce era in el
  spi_out_buf_len = 0
  spi_in_buf_len = slave_bytes_avail

  in_spi = 0
end
 

event attributes_value(connection, reason, handle, offset, value_len, value_data)

  if handle = xgatt_custom_name then
    memcpy(name(0), value_data(0), value_len)
    name_len = value_len
    call connection_disconnect(connection)
  end if

  if handle = xgatt_data then
    if offset = 0 then
      expected_length = value_data(0:1) + 1
      waiting_for_client = 0
    end if
    spi_out_buf(offset:value_len) = value_data(0:value_len)

    # Write to SPI if finished
    if offset + value_len = expected_length then #am primit pachetul complet prin BLE
      spi_out_buf_len = expected_length
      if waiting_for_client != 1 #nu asteptam sa trimitem ceva prin BLE
		
		#call power_on_CC()	#activate power to CC and wait for it to stabilize
		
        call do_spi()  #trebuie sa trimitem prin SPI la CC -> POD; comunicarea cu POD incepe (1)
		
      end if
    end if
  end if

  if handle = xgatt_led_mode then
    # call set_led_mode(value_data(0:1)) //don't play with the RED led via BLE
  end if

  if reason = 2 then # User requesting response
    call attributes_user_write_response(connection, 0)
  end if
end

event attributes_user_read_request(connection, handle, offset, maxsize)
  if handle = xgatt_battery then
    batconn_handle=connection
	# trigger ADC read on P0_6, full 12-bit decimation, 1.24v reference
    call hardware_adc_read(6, 3, 0)
  end if

  if handle = xgatt_data then #Riley vrea sa citeasca prin BLE

    if waiting_for_client = 1 then #te asteptam cu date, bine ai venit :)
      bytes_to_send = spi_in_buf_len - offset
      if bytes_to_send > maxsize then
        bytes_to_send = maxsize
      end if
      call attributes_user_read_response(connection,0,bytes_to_send,spi_in_buf(offset:bytes_to_send)) #trimite maxsize
      if offset + maxsize > spi_in_buf_len then #am trimis tot
        waiting_for_client = 0 #deci nu mai e nimic de trimis
      end if
    else
      # No data to send
      waiting_for_client = 0
      call attributes_user_read_response(connection,0,0,spi_in_buf(0:0))
    end if

    #if waiting_for_client = 0 #nimic care asteapta sa fie trimis prin BLE
      # call set_data_led(0)
     # call do_spi() #dar poate avem ceva date noi de la POD via CC via SPI?
    #end if

  end if

  if handle = xgatt_led_mode then
    call hardware_io_port_write(0, $10, $10)
    call attributes_user_read_response(connection,0,1,led_mode)
  end if

end

event hardware_adc_result(input,value)
	#use lookup table to report current baterry capacity based on voltage
	#measurement range is 32768=1.24v*3.53=4.37V => 4.20v = 32768*4.20/4.37 = 31493
	  
	bat_idx = 0 #strings start from 0
	while value*voltage_adj/1000 < bat_voltage_LSB(bat_idx:1) + bat_voltage_MSB(bat_idx:1)*256 #compare to voltage look-up table, adjusting to variations in ADC reference voltage
		bat_idx = bat_idx + 1
	end while

	batresult = bat_charge(bat_idx:1)

	if batconn_handle<$ff then    #if connection handle is valid
		call attributes_user_read_response(batconn_handle,0,1,batresult)
		batconn_handle=$ff
	end if
end

# Timer event listener to poll data from spi
event hardware_soft_timer(handle)

	if connected = 1 && waiting_for_client = 0 && comm_in_progress = 1 then #check if CC has an answer for BLE command, unless we are waiting for Loop to take the data from BLE buffer
		call do_spi()			
	end if

	led_timer = led_timer + 1 						#increment every 50ms
	
	if led_timer = 60 then 							#after 3 seconds from previous cycle
		if batresult < red_blink1 then 				#battery life below 12h capacity and connected
			call hardware_io_port_write(0, 2, 0) 	#light battery warning led
		else										#battery is still ok
			if connected = 1 then					#and BLE is connected
				call hardware_io_port_write(0, 1, 0)#turn on green led
			end if
		end if
	end if 
  
	if led_timer = 63 then 							#after 3.15s
		call hardware_io_port_write(0, 1, 1)		#green led off
		call hardware_io_port_write(0, 2, 2)		#red led off
	end if 
	
	if led_timer = 66 && batresult < red_blink2 then	#after 3.3 seconds, when battery life below 6h
		call hardware_io_port_write(0, 2, 0) 			#light battery warning led
	end if 
	
	if led_timer = 68 then 							#after 3.45s
		led_timer = 0								#reset timer
		call hardware_adc_read(6, 3, 0)				#trigger ADC read on P0_6, full 12-bit decimation, 1.24v reference
		call hardware_io_port_write(0, 2, 2)		#red led off
	end if 
	

	timer_tick_count = timer_tick_count + 1
	if timer_tick_count > 1200 #1200 ticks of a 50ms timer is ~1min
		timer_tick_count = 0
		timer_update_count = timer_update_count + 1
		call attributes_write(xgatt_timer_tick,0,1,timer_update_count) #updates the rileylink_ios-master for timeout checking
	end if
end


# Connection event listener
event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
  # Device is connected. Turn on green led
  # call hardware_io_port_write(0, $1, $1)
  connected = 1

  # Drop any data what was waiting to go to client from
  # previous connection.
  waiting_for_client = 0
  spi_in_buf_len = 0
  slave_bytes_avail = 0

end

event connection_disconnected(handle,res)
  #start advertising again after disconnection
  call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
  # Device disconnected. Turn off green led
  # call hardware_io_port_write(0, $1, $0)
  connected = 0

  # Save name
  if name_len > 0
    call attributes_write(xgatt_name, 0, name_len, name(0:name_len))
    call flash_ps_save($8000, name_len, name(0:name_len))
  end if

end
